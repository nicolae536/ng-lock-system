{"version":3,"file":"lock-manager.service.js","sourceRoot":"","sources":["../../src/lock-manager.service.ts"],"names":[],"mappings":"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","sourcesContent":["import { Injectable, OnDestroy, Inject } from \"@angular/core\";\r\nimport { BehaviorSubject } from \"rxjs/BehaviorSubject\";\r\nimport { Observable } from \"rxjs/Observable\";\r\nimport { Subscription } from \"rxjs/Subscription\";\r\nimport { LOCK_STATUS, ComponentsLockMap } from \"./lock.constants\";\r\nimport { UtilService } from \"./util.service\";\r\nimport { ENABLE_LOGGING } from \"./ng-lock-system.module\";\r\nimport \"rxjs/add/operator/map\";\r\nimport \"rxjs/add/operator/debounceTime\";\r\n\r\n@Injectable()\r\nexport class LockManagerService implements OnDestroy {\r\n    private _managerLock$: BehaviorSubject<ComponentsLockMap> = new BehaviorSubject<ComponentsLockMap>({});\r\n\r\n    constructor(@Inject(ENABLE_LOGGING) enableLogging: boolean,\r\n                private _util: UtilService) {\r\n        if (enableLogging) {\r\n            this.startLogging();\r\n        }\r\n    }\r\n\r\n    /**\r\n     * @desc  sets the componentId as locked inside the _managerLock$ observable\r\n     * @param {string} componentId\r\n     * @param {boolean} lockManager if passed with true this will mark the manager as locked\r\n     */\r\n    lockManager(componentId?: string, lockManager: boolean = false) {\r\n        this.dispatchStatus(LOCK_STATUS.LOCKED, componentId, lockManager);\r\n    }\r\n\r\n    /**\r\n     * @desc  sets the componentId as unlocked inside the _managerLock$ observable we automatically mark the lockManager as false\r\n     * @param {string} componentId\r\n     */\r\n    unlockManager(componentId?: string) {\r\n        this.dispatchStatus(LOCK_STATUS.UNLOCKED, componentId, false);\r\n    }\r\n\r\n    /**\r\n     * @param {string | string[]} components\r\n     * @desc components is an string | string[] if is not passed this will return\r\n     *            an observable which will look to the first component which locks the page\r\n     *       if components is passed it will return an observable which will be true\r\n     *            if a component is locked or false if all of them are unlocked\r\n     * @returns {Observable<boolean>}\r\n     */\r\n    listenTo(components: string | string[] = []): Observable<boolean> {\r\n        const arrayStatus = this._util.mapToArray<string>(components);\r\n\r\n        return arrayStatus.length === 0\r\n            ? this._managerLock$\r\n                .map(managerMap => this.getManagerLockedState(managerMap))\r\n                .debounceTime(0)\r\n            : this._managerLock$\r\n                .map(managerMap => this.getManagerLockedSubspace(managerMap, arrayStatus))\r\n                .debounceTime(0);\r\n    }\r\n\r\n    /**\r\n     * @desc if we use subscribe on a listenTo returned observable we need to unsubscribe it\r\n     * @param {Subscription | Subscription[]} observables\r\n     */\r\n    unListen(observables: Subscription | Subscription[] = []) {\r\n        this._util.destroySubscription(observables);\r\n    }\r\n\r\n    /**\r\n     * @desc A component should be removed from the lock manager so it will not mess up the lock state of the manager\r\n     * @param {Subscription | Subscription[]} observables\r\n     */\r\n    removeComponent(cmpId: string) {\r\n        let latestStatus = !this._managerLock$.isStopped\r\n            ? this._managerLock$.getValue()\r\n            : {};\r\n\r\n        if (latestStatus && latestStatus[cmpId]) {\r\n            latestStatus = this._util.cloneObjectWithoutProps<ComponentsLockMap>(latestStatus, [cmpId]);\r\n        }\r\n\r\n        this._managerLock$.next(latestStatus);\r\n    }\r\n\r\n    /**\r\n     * Cleanup memory\r\n     */\r\n    ngOnDestroy(): void {\r\n        this._managerLock$.complete();\r\n    }\r\n\r\n    private dispatchStatus(newStatus: string, componentId?: string, lockManager: boolean = false) {\r\n        if (!LOCK_STATUS[newStatus] || !componentId) {\r\n            return;\r\n        }\r\n\r\n        // get the observable model\r\n        const appLockMap = !this._managerLock$.isStopped\r\n            ? this._managerLock$.getValue()\r\n            : {};\r\n\r\n\r\n        appLockMap[componentId] = {\r\n            status: newStatus,\r\n            lockManager: lockManager\r\n        };\r\n        this._managerLock$.next(appLockMap);\r\n    }\r\n\r\n    /**\r\n     * @param {LockStatus} managerMap\r\n     * @returns true if in the manager is a component which lockes the whole manager\r\n     */\r\n    private getManagerLockedState(managerMap: ComponentsLockMap): boolean {\r\n        if (!this._util.isObject(managerMap)) {\r\n            return false;\r\n        }\r\n\r\n        for (const cmpId in managerMap.components) {\r\n            if (managerMap[cmpId] &&\r\n                managerMap[cmpId].lockManager &&\r\n                managerMap[cmpId].status === LOCK_STATUS.LOCKED) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * @param {LockStatus} managerMap\r\n     * @param {string[]} listenedComponents\r\n     * @returns true if a component is locked or false if all the listend components are unlocked\r\n     */\r\n    private getManagerLockedSubspace(managerMap: ComponentsLockMap, listenedComponents: string[]): boolean {\r\n        for (const managerKey in managerMap) {\r\n            if (managerMap[managerKey] &&\r\n                managerMap[managerKey].status === LOCK_STATUS.LOCKED &&\r\n                listenedComponents.indexOf(managerKey) !== -1) {\r\n\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    private startLogging() {\r\n        this._managerLock$\r\n            .subscribe(managerMap => {\r\n                const val = {};\r\n                for (const mapKey in managerMap) {\r\n                    if (this._util.isObject(managerMap[mapKey])) {\r\n                        val[mapKey] = {...managerMap[mapKey]};\r\n                    }\r\n                }\r\n                console.info(\"\", val);\r\n            });\r\n    }\r\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}